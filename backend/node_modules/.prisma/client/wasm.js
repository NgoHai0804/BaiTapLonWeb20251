
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  nickname: 'nickname',
  email: 'email',
  avatar: 'avatar',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastOnline: 'lastOnline'
};

exports.Prisma.FriendScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  addresseeId: 'addresseeId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  roomName: 'roomName',
  passwordHash: 'passwordHash',
  hostId: 'hostId',
  maxPlayers: 'maxPlayers',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameCaroScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  playerXId: 'playerXId',
  playerOId: 'playerOId',
  winnerId: 'winnerId',
  boardSize: 'boardSize',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  mode: 'mode',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Status = exports.$Enums.Status = {
  OFFLINE: 'OFFLINE',
  ONLINE: 'ONLINE',
  IN_GAME: 'IN_GAME',
  BANNED: 'BANNED'
};

exports.FriendStatus = exports.$Enums.FriendStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  BLOCKED: 'BLOCKED'
};

exports.RoomStatus = exports.$Enums.RoomStatus = {
  WAITING: 'WAITING',
  PLAYING: 'PLAYING',
  ENDED: 'ENDED'
};

exports.GameMode = exports.$Enums.GameMode = {
  P2P: 'P2P',
  P2B: 'P2B'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  EMOJI: 'EMOJI',
  STICKER: 'STICKER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  FRIEND_REQUEST: 'FRIEND_REQUEST',
  ROOM_INVITE: 'ROOM_INVITE',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Friend: 'Friend',
  Room: 'Room',
  GameCaro: 'GameCaro',
  Message: 'Message',
  Notification: 'Notification'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\BaiTapLonWeb20251\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\BaiTapLonWeb20251\\backend\\src\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../src/prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = []\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\n/////////////////////////////////////////////////\n// USERS\n/////////////////////////////////////////////////\n\nmodel User {\n  id         String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  username   String     @unique\n  password   String // Password hash - should be encrypted\n  nickname   String     @unique\n  email      String?    @unique\n  avatar     String?\n  status     Status     @default(OFFLINE)\n  gameStats  GameStat[]\n  createdAt  DateTime   @default(now())\n  updatedAt  DateTime   @updatedAt\n  lastOnline DateTime?\n\n  // Relations\n  friendsAsRequester Friend[]       @relation(\"RequesterFriends\")\n  friendsAsAddressee Friend[]       @relation(\"AddresseeFriends\")\n  notifications      Notification[]\n  messagesSent       Message[]      @relation(\"SentMessages\")\n  messagesReceived   Message[]      @relation(\"ReceivedMessages\")\n  roomsHosted        Room[]         @relation(\"RoomHosts\")\n  gamesX             GameCaro[]     @relation(\"PlayerX\")\n  gamesO             GameCaro[]     @relation(\"PlayerO\")\n  gamesWon           GameCaro[]     @relation(\"GameWinners\")\n\n  // username và nickname đã có @unique nên không cần @@index riêng\n  @@index([status])\n  @@index([createdAt])\n  @@map(\"users\")\n}\n\nenum Status {\n  OFFLINE\n  ONLINE\n  IN_GAME\n  BANNED\n}\n\ntype GameStat {\n  gameId     String\n  nameGame   String\n  totalGames Int    @default(0)\n  totalWin   Int    @default(0)\n  score      Int    @default(1000)\n}\n\n/////////////////////////////////////////////////\n// FRIENDS\n/////////////////////////////////////////////////\n\nmodel Friend {\n  id          String       @id @default(auto()) @map(\"_id\") @db.ObjectId\n  requester   User         @relation(\"RequesterFriends\", fields: [requesterId], references: [id], onDelete: Cascade)\n  requesterId String       @db.ObjectId\n  addressee   User         @relation(\"AddresseeFriends\", fields: [addresseeId], references: [id], onDelete: Cascade)\n  addresseeId String       @db.ObjectId\n  status      FriendStatus @default(PENDING)\n  createdAt   DateTime     @default(now())\n  updatedAt   DateTime     @updatedAt\n\n  @@unique([requesterId, addresseeId])\n  // @@unique([requesterId, addresseeId]) đã tạo index nên không cần @@index riêng\n  @@index([requesterId, status])\n  @@index([addresseeId, status])\n  @@index([createdAt])\n  @@map(\"friends\")\n}\n\nenum FriendStatus {\n  PENDING\n  ACCEPTED\n  BLOCKED\n}\n\n/////////////////////////////////////////////////\n// ROOMS\n/////////////////////////////////////////////////\n\nmodel Room {\n  id           String       @id @default(auto()) @map(\"_id\") @db.ObjectId\n  roomName     String\n  passwordHash String?\n  host         User         @relation(\"RoomHosts\", fields: [hostId], references: [id], onDelete: Cascade)\n  hostId       String       @db.ObjectId\n  maxPlayers   Int          @default(2)\n  status       RoomStatus   @default(WAITING)\n  players      RoomPlayer[]\n  createdAt    DateTime     @default(now())\n  updatedAt    DateTime     @updatedAt\n\n  @@index([hostId])\n  @@index([status])\n  @@index([createdAt])\n  @@map(\"rooms\")\n}\n\nenum RoomStatus {\n  WAITING\n  PLAYING\n  ENDED\n}\n\ntype RoomPlayer {\n  userId    String   @db.ObjectId\n  isHost    Boolean  @default(false)\n  isReady   Boolean  @default(false)\n  joinedAt  DateTime @default(now())\n  sessionId String?\n}\n\n/////////////////////////////////////////////////\n// GAME CARO\n/////////////////////////////////////////////////\n\nmodel GameCaro {\n  id        String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  roomId    String?    @db.ObjectId\n  playerX   User?      @relation(\"PlayerX\", fields: [playerXId], references: [id], onDelete: SetNull)\n  playerXId String?    @db.ObjectId\n  playerO   User?      @relation(\"PlayerO\", fields: [playerOId], references: [id], onDelete: SetNull)\n  playerOId String?    @db.ObjectId\n  winner    User?      @relation(\"GameWinners\", fields: [winnerId], references: [id], onDelete: SetNull)\n  winnerId  String?    @db.ObjectId\n  boardSize Int        @default(15)\n  startedAt DateTime   @default(now())\n  endedAt   DateTime?\n  mode      GameMode   @default(P2P)\n  moves     MoveCaro[]\n  updatedAt DateTime   @updatedAt\n\n  @@index([roomId])\n  @@index([playerXId])\n  @@index([playerOId])\n  @@index([playerXId, playerOId])\n  @@index([startedAt])\n  @@map(\"gamecaros\")\n}\n\nenum GameMode {\n  P2P\n  P2B\n}\n\ntype MoveCaro {\n  userId     String?  @db.ObjectId\n  moveNumber Int\n  x          Int\n  y          Int\n  createdAt  DateTime @default(now())\n}\n\n/////////////////////////////////////////////////\n// MESSAGES\n/////////////////////////////////////////////////\n\nmodel Message {\n  id         String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  roomId     String?     @db.ObjectId\n  sender     User        @relation(\"SentMessages\", fields: [senderId], references: [id], onDelete: Cascade)\n  senderId   String      @db.ObjectId\n  receiver   User?       @relation(\"ReceivedMessages\", fields: [receiverId], references: [id], onDelete: SetNull)\n  receiverId String?     @db.ObjectId\n  type       MessageType @default(TEXT)\n  message    String\n  isRead     Boolean     @default(false)\n  createdAt  DateTime    @default(now())\n  updatedAt  DateTime    @updatedAt\n\n  @@index([roomId])\n  @@index([senderId, createdAt])\n  @@index([receiverId, isRead])\n  @@index([senderId, receiverId])\n  @@index([createdAt])\n  @@map(\"messages\")\n}\n\nenum MessageType {\n  TEXT\n  EMOJI\n  STICKER\n}\n\n/////////////////////////////////////////////////\n// NOTIFICATIONS\n/////////////////////////////////////////////////\n\nmodel Notification {\n  id        String           @id @default(auto()) @map(\"_id\") @db.ObjectId\n  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId    String           @db.ObjectId\n  type      NotificationType\n  content   String\n  isRead    Boolean          @default(false)\n  createdAt DateTime         @default(now())\n  updatedAt DateTime         @updatedAt\n\n  @@index([userId, isRead])\n  @@index([userId, createdAt])\n  @@index([type])\n  @@map(\"notifications\")\n}\n\nenum NotificationType {\n  FRIEND_REQUEST\n  ROOM_INVITE\n  SYSTEM\n}\n",
  "inlineSchemaHash": "41c84d7f05dd4cbc593463d3844c6d8aa399ffd0ce87b30afc89425bbc2b4c2a",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nickname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"Status\"},{\"name\":\"gameStats\",\"kind\":\"object\",\"type\":\"GameStat\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastOnline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"friendsAsRequester\",\"kind\":\"object\",\"type\":\"Friend\",\"relationName\":\"RequesterFriends\"},{\"name\":\"friendsAsAddressee\",\"kind\":\"object\",\"type\":\"Friend\",\"relationName\":\"AddresseeFriends\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"messagesSent\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"SentMessages\"},{\"name\":\"messagesReceived\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"roomsHosted\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"RoomHosts\"},{\"name\":\"gamesX\",\"kind\":\"object\",\"type\":\"GameCaro\",\"relationName\":\"PlayerX\"},{\"name\":\"gamesO\",\"kind\":\"object\",\"type\":\"GameCaro\",\"relationName\":\"PlayerO\"},{\"name\":\"gamesWon\",\"kind\":\"object\",\"type\":\"GameCaro\",\"relationName\":\"GameWinners\"}],\"dbName\":\"users\"},\"Friend\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"requester\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RequesterFriends\"},{\"name\":\"requesterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"addressee\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AddresseeFriends\"},{\"name\":\"addresseeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FriendStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"friends\"},\"Room\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"roomName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"host\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoomHosts\"},{\"name\":\"hostId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxPlayers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RoomStatus\"},{\"name\":\"players\",\"kind\":\"object\",\"type\":\"RoomPlayer\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"rooms\"},\"GameCaro\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playerX\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PlayerX\"},{\"name\":\"playerXId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playerO\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PlayerO\"},{\"name\":\"playerOId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"winner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GameWinners\"},{\"name\":\"winnerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"mode\",\"kind\":\"enum\",\"type\":\"GameMode\"},{\"name\":\"moves\",\"kind\":\"object\",\"type\":\"MoveCaro\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"gamecaros\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SentMessages\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"MessageType\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"messages\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notifications\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

