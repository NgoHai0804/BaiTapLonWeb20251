generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////////////////
// USERS
/////////////////////////////////////////////////

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  username   String     @unique
  password   String // Password hash - should be encrypted
  nickname   String     @unique
  email      String?    @unique
  avatar     String?
  status     Status     @default(OFFLINE)
  gameStats  GameStat[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastOnline DateTime?

  // Relations
  friendsAsRequester Friend[]       @relation("RequesterFriends")
  friendsAsAddressee Friend[]       @relation("AddresseeFriends")
  notifications      Notification[]
  messagesSent       Message[]      @relation("SentMessages")
  messagesReceived   Message[]      @relation("ReceivedMessages")
  roomsHosted        Room[]         @relation("RoomHosts")
  gamesX             GameCaro[]     @relation("PlayerX")
  gamesO             GameCaro[]     @relation("PlayerO")
  gamesWon           GameCaro[]     @relation("GameWinners")

  // username và nickname đã có @unique nên không cần @@index riêng
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

enum Status {
  OFFLINE
  ONLINE
  IN_GAME
  BANNED
}

type GameStat {
  gameId     String
  nameGame   String
  totalGames Int    @default(0)
  totalWin   Int    @default(0)
  score      Int    @default(1000)
}

/////////////////////////////////////////////////
// FRIENDS
/////////////////////////////////////////////////

model Friend {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  requester   User         @relation("RequesterFriends", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String       @db.ObjectId
  addressee   User         @relation("AddresseeFriends", fields: [addresseeId], references: [id], onDelete: Cascade)
  addresseeId String       @db.ObjectId
  status      FriendStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([requesterId, addresseeId])
  // @@unique([requesterId, addresseeId]) đã tạo index nên không cần @@index riêng
  @@index([requesterId, status])
  @@index([addresseeId, status])
  @@index([createdAt])
  @@map("friends")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

/////////////////////////////////////////////////
// ROOMS
/////////////////////////////////////////////////

model Room {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  roomName     String
  passwordHash String?
  host         User         @relation("RoomHosts", fields: [hostId], references: [id], onDelete: Cascade)
  hostId       String       @db.ObjectId
  maxPlayers   Int          @default(2)
  status       RoomStatus   @default(WAITING)
  players      RoomPlayer[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([hostId])
  @@index([status])
  @@index([createdAt])
  @@map("rooms")
}

enum RoomStatus {
  WAITING
  PLAYING
  ENDED
}

type RoomPlayer {
  userId    String   @db.ObjectId
  isHost    Boolean  @default(false)
  isReady   Boolean  @default(false)
  joinedAt  DateTime @default(now())
  sessionId String?
}

/////////////////////////////////////////////////
// GAME CARO
/////////////////////////////////////////////////

model GameCaro {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String?    @db.ObjectId
  playerX   User?      @relation("PlayerX", fields: [playerXId], references: [id], onDelete: SetNull)
  playerXId String?    @db.ObjectId
  playerO   User?      @relation("PlayerO", fields: [playerOId], references: [id], onDelete: SetNull)
  playerOId String?    @db.ObjectId
  winner    User?      @relation("GameWinners", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId  String?    @db.ObjectId
  boardSize Int        @default(15)
  startedAt DateTime   @default(now())
  endedAt   DateTime?
  mode      GameMode   @default(P2P)
  moves     MoveCaro[]
  updatedAt DateTime   @updatedAt

  @@index([roomId])
  @@index([playerXId])
  @@index([playerOId])
  @@index([playerXId, playerOId])
  @@index([startedAt])
  @@map("gamecaros")
}

enum GameMode {
  P2P
  P2B
}

type MoveCaro {
  userId     String?  @db.ObjectId
  moveNumber Int
  x          Int
  y          Int
  createdAt  DateTime @default(now())
}

/////////////////////////////////////////////////
// MESSAGES
/////////////////////////////////////////////////

model Message {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  roomId     String?     @db.ObjectId
  sender     User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String      @db.ObjectId
  receiver   User?       @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)
  receiverId String?     @db.ObjectId
  type       MessageType @default(TEXT)
  message    String
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([roomId])
  @@index([senderId, createdAt])
  @@index([receiverId, isRead])
  @@index([senderId, receiverId])
  @@index([createdAt])
  @@map("messages")
}

enum MessageType {
  TEXT
  EMOJI
  STICKER
}

/////////////////////////////////////////////////
// NOTIFICATIONS
/////////////////////////////////////////////////

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String           @db.ObjectId
  type      NotificationType
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type])
  @@map("notifications")
}

enum NotificationType {
  FRIEND_REQUEST
  ROOM_INVITE
  SYSTEM
}
